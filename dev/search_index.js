var documenterSearchIndex = {"docs":
[{"location":"#SafetySignalDetection.jl","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.jl","text":"","category":"section"},{"location":"","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.jl","text":"Documentation for SafetySignalDetection.jl","category":"page"},{"location":"","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.jl","text":"Modules = [SafetySignalDetection]","category":"page"},{"location":"#SafetySignalDetection.blinded_analysis_model-Tuple{Vector{Bool}, Vector{Float64}, Distributions.Distribution, Distributions.Distribution, Float64}","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.blinded_analysis_model","text":"Blinded Analysis Model\n\nThis Turing model is used to generate posterior samples of the adverse event probabilities pi_exp in the experimental arm and pi_ctrl in the control arm given a blinded analysis of a trial with exp_proportion ratio of experimental arm patients relative to all patients.\n\nblindedanalysismodel(     y::Vector{Bool},      time::Vector{Float64},      priorexp::Distribution,      priorctrl::Distribution,     exp_proportion::Float64)\n\n\n\n\n\n","category":"method"},{"location":"#SafetySignalDetection.blinded_analysis_samples-Tuple{DataFrames.DataFrame, Distributions.Distribution, Distributions.Distribution, Float64, Vararg{Any}}","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.blinded_analysis_samples","text":"Blinded Analysis Posterior Samples Generation\n\nThis function wraps the Turing model blinded_analysis_model and runs it for a data frame df with:     - y: Bool (did the adverse event occur?)     - time: Float64 (time until adverse event or until last treatment or follow up)\n\nNote that arguments for the number of samples per chain and the number of chains have to be passed as well.\n\nIt returns a DataFrame with the posterior samples for pi_exp and pi_ctrl.\n\n\n\n\n\n","category":"method"},{"location":"#SafetySignalDetection.fit_beta_mixture-Union{Tuple{T}, Tuple{AbstractArray{T}, Int64}} where T<:Real","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.fit_beta_mixture","text":"Fit a beta mixture to a vector of prior samples\n\nThis function returns a beta mixture of n_components components approximating the distribution of the sample vector x.\n\n\n\n\n\n","category":"method"},{"location":"#SafetySignalDetection.meta_analysis_model-Tuple{Vector{Bool}, Vector{Float64}, Vector{Int64}, Distributions.Distribution, Distributions.Distribution}","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.meta_analysis_model","text":"Meta Analysis Model\n\nThis Turing model is used to generate posterior samples of the parameters a and b.\n\nmetaanalysismodel(     y::Vector{Bool},      time::Vector{Float64},      trialindex::Vector{Int64},      priora::Distribution,      priorb::Distribution)\n\n\n\n\n\n","category":"method"},{"location":"#SafetySignalDetection.meta_analytic_samples-Tuple{DataFrames.DataFrame, Distributions.Distribution, Distributions.Distribution, Vararg{Any}}","page":"SafetySignalDetection.jl","title":"SafetySignalDetection.meta_analytic_samples","text":"Meta Analytic Prior Samples Generation\n\nThis function wraps the Turing model meta_analysis_model and runs it for a data frame df with:     - y: Bool (did the adverse event occur?)     - time: Float64 (time until adverse event or until last treatment or follow up)     - trialindex: Int64 (index of trials, starting from 1 and consecutively numbered)\n\nmeta_analytic_samples(\ndf::DataFrame,\nprior_a::Distribution, \nprior_b::Distribution, \nargs...\n)\n\nNote that arguments for the number of samples per chain and the number of chains have to be passed as well.\n\nIt returns an array with the samples from the meta analytic prior (MAP).\n\n\n\n\n\n","category":"method"}]
}
